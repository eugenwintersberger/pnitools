#python module manging the configuration of the sources.
import compiler_checks

#-------------------------------------------------------------------------------


Import('env')
#start with configuration
conf = Configure(env,custom_tests = compiler_checks.compiler_checks)


env = compiler_checks.check_compiler_features(conf,env)
env = compiler_checks.check_type_sizes(conf,env)


#================================checking for header files=====================
#check for mandatory header files
if not conf.CheckCXXHeader("boost/numeric/conversion/cast.hpp"):
    print "BOOST header file cast.hpp does not exist!"
    Exit(1)
    
#check for boost current_function header
if not conf.CheckCXXHeader("boost/current_function.hpp"):
    print "BOOST current_function.hpp not found!"
    Exit(1)

if not conf.CheckCXXHeader("boost/filesystem.hpp"):
    print "BOOST filesystem not found!"
    Exit(1)

if not conf.CheckCXXHeader("boost/tokenizer.hpp"):
    print "BOOST tokenizer not found!"
    Exit(1)

if not conf.CheckHeader("readline/readline.h"):
    print "Readline development files not installed!"
    Exit(1)
    
if not conf.CheckCXXHeader("boost/program_options/options_description.hpp")\
    or not conf.CheckCXXHeader("boost/program_options/variables_map.hpp")\
    or not conf.CheckCXXHeader("boost/program_options/parsers.hpp")\
    or not conf.CheckCXXHeader("boost/program_options/positional_options.hpp"):
    print "BOOST program options headers not installed!"
    Exit(1)


#================checking for libraries========================================
if not conf.CheckLib("boost_program_options"):
    print "BOOST program options library not installed!"
    Exit(1)

if not conf.CheckLib("boost_system"):
    print "BOOSt system library not installed!"
    Exit(1)

#check for boost regular expressions library
if not conf.CheckLib("boost_regex",language="C++"):
    print "BOOST regular expression library not found"
    Exit(1)

if not conf.CheckLib("boost_filesystem",language="C++"):
    print "BOOST filesystem library not found!"
    Exit(1)

if not conf.CheckLib("readline"):
    print "Readline runtime library not installed"
    Exit(1)

env = conf.Finish()

#create the build environments for the library and the test
build_env = env.Clone()
test_env  = env.Clone()

#============================start configuration for tests=====================
test_conf = Configure(test_env)

if not test_conf.CheckCXXHeader("cppunit/TestFixture.h"):
    print "CPPUNIT header TestFixture.h does not exist!"
    Exit(1)
    
if not test_conf.CheckCXXHeader("cppunit/TestRunner.h"):
    print "CPPUNIT header TestRunner.h does not exist!"
    Exit(1)
    
if not test_conf.CheckCXXHeader("cppunit/extensions/HelperMacros.h"):
    print "CPPUNIT header HelperMacros.h does not exist!"
    Exit(1)
    
if not test_conf.CheckCXXHeader("cppunit/TestCaller.h"):
    print "CPPUNIT header TestCaller.h does not exist!"
    Exit(1)
    
if not test_conf.CheckCXXHeader(["string","cppunit/TestResult.h"]):
    print "CPPUNIT header TestResult.h does not exist!"
    Exit(1)
    
if not test_conf.CheckCXXHeader("cppunit/TextTestProgressListener.h"):
    print "CPPUNIT header TextTestProgressListener.h does not exist!"
    Exit(1)
    
if not test_conf.CheckCXXHeader("cppunit/ui/text/TextTestRunner.h"):
    print "CPPUNIT header TextTestRunner.h does not exist!"
    Exit(1)

#check for mandatory libraries
if not test_conf.CheckLib("cppunit",language="C++"):
    print "CPPUNIT unit test libraray is not installed!"
    Exit(1)


test_env = test_conf.Finish()


Return('build_env test_env')
