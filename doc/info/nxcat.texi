@command{nxcat} prints the data stored in a Nexus field to standard out. 
Currently only scalar data fields are supported (this may change in future). 

@example
nxcat [OPTIONS] SOURCE [SOURCE ...]
@end example

@noindent 
@var{SOURCE} are nexus paths to Nexus fields as described in @ref{Addressing
Nexus objects}. A typical application of this program be a situation where the
data stored by several fields must be stored in an ASCII file. It is important
to note that the Nexus fields the @var{SOURCE} arguments refer to are not
necessarily from the same file.

@command{nxcat} returns 0 on success and 1 otherwise.

@subsection Program options
The programm takes the following options
@table @samp
@item -h
@itemx --help
print short program help
@item --header
Print header with column name and unit information to the output.
@item -s
@itemx --start
first index (included in the output)
@item -e
@itemx --end
last index (not included in the output)
@end table

@subsection Examples

A good use case for @command{nxcat} would be for instance plotting data stored
in a Nexus file using @command{gnuplot}. In the simplest case one can do
something like this

@example
$ GCMD1="set log y; plot '-' u 1 w l"
$ GCMD2="set log y; plot '-' u 1:2 w l"
$ BASE="file.nx:///:NXentry/:NXinstrument"
$ CHAN5=$BASE/channel_5
$ nxcat $CHAN5/polar_angle $CHAN5/data | gnuplot -p -e "$GCMD2"
@end example
@noindent
yielding 
@float
@center @image{pics/nxcat_full,,3in,.pdf}
@end float
@noindent
The plotting range can easily be reduced by only reading a section of the data
which can be specified by the @option{-s} and @option{-e} option
@example
$ nxcat -s200 -e400 $CHAN5/polar_angle $CHAN5/data | gnuplot -p -e "$GCMD2"
@end example
@float
@center @image{pics/nxcat_selection,,3in,.pdf}
@end float

By default @command{nxcat} just prints the data to standard out as shown in this
example
@example
$ nxcat -s1 -e4 $CHAN7/polar_angle $CHAN7/data 
6.99727         2 
6.99829         6 
6.99941         5 
@end example
@noindent 
and for the previous plotting job this would be perfectly ok. However, some
programs may require a name and a unit for each of the columns. Using the
@option{--header} makes @command{nxcat} printing a short header holding the name
and the unit of each column 
@example
$ nxcat --header -s1 -e4 $CHAN7/polar_angle $CHAN7/data 
#polar_angle (degrees)
#data (counts)
6.99727         2 
6.99829         6 
6.99941         5 
@end example
