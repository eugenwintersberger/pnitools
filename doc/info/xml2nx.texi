@command{xml2nx} creates a Nexus file from an XML file. 

@example
$ xml2nx [OPTIONS] FILE [FILE...]
@end example


@command{xml2nx} returns 0 on success 1 otherwise.

In general Nexus files are rather elaborate and thus expensive to create. It is
much easier to create the basic structure as XML and afterwards use
@command{xml2nx} to create the Nexus file. 


@subsection Program options

The programm takes the following options:
@table @samp
@item -h
@itemx --help
print short program help
@item -p
@itemx --parent
The parent node under which the content described by the NXDL file should be
attached. The node is described by a Nexus path as described in @ref{Addressing
Nexus objects}
@item -o
@itemx --overwrite
Overwrite the file. With this option set an already existing file of same name
will be overwritten.
@end table

@subsection Examples

Start with the XML file that holds the basic structure
@example
<group name="scan_1" type="NXentry">
    <group name="instrument" type="NXinstrument"> </group>
    <group name="sample" type="NXsample"> </group>
    <group name="control" type="NXmonitor"> </group>
    <group name="data" type="NXdata"> </group>
</group>
@end example

@noindent
and store it as @file{basic.xml}. To create the basic file using this we can use 

@example
$ xml2nx -poutput.nx basic.xml
@end example

@noindent
where the name of the nexus file (here @file{output.nx}) is enough to specify
the parent object. As a result we should get something like this

@example
$ nxls -r output.nx 
/scan_1:NXentry
/scan_1:NXentry/control:NXmonitor
/scan_1:NXentry/data:NXdata
/scan_1:NXentry/instrument:NXinstrument
/scan_1:NXentry/sample:NXsample
@end example

@noindent
In the next step we could add an detector as described in @file{detector.xml}

@example
<group name ="detector" type="NXdetector">
    <field name="data" type="uint32" units="cps" 
        long_name = "detector raw data">

        <dimensions rank="2">
            <dim index="1" value="0"/>
            <dim index="2" value="2048"/>
        </dimensions>

    </field>

    <field name="x_pixel_size" unit="um" type="float32">
        12.45
    </field>
    <field name="y_pixel_size" unit="um" type="float32">
        12.45
    </field>
    <field name="layout" type="string" unit="">
        linear
    </field>

    <field name="description" type="string" unit="">
        PSD
    </field>

    <field name="distance" type="float32" unit="m">
        0.8
    </field>
</group>
@end example

@noindent 
however we need to be a more precise here where to put the detector object. 

@example
$ xml2nx -poutput.nx:///:NXentry/:NXinstrument detector.xml
@end example

@noindent
which leaves us with 

@example
$ nxls -r output.nx 
/scan_1:NXentry
/scan_1:NXentry/control:NXmonitor
/scan_1:NXentry/data:NXdata
/scan_1:NXentry/instrument:NXinstrument
/scan_1:NXentry/instrument:NXinstrument/detector:NXdetector
/scan_1:NXentry/instrument:NXinstrument/detector:NXdetector/data
/scan_1:NXentry/instrument:NXinstrument/detector:NXdetector/description
/scan_1:NXentry/instrument:NXinstrument/detector:NXdetector/distance
/scan_1:NXentry/instrument:NXinstrument/detector:NXdetector/layout
/scan_1:NXentry/instrument:NXinstrument/detector:NXdetector/x_pixel_size
/scan_1:NXentry/instrument:NXinstrument/detector:NXdetector/y_pixel_size
/scan_1:NXentry/sample:NXsample
@end example

