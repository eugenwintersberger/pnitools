@command{mcaops} is a program acting on MCA data. 

@example
mcaops [COMMAND] [OPTIONS] [INPUT FILE| - ]
@end example

@noindent
@command{mcaops} is a utility program applying certain operations on MCA data.
The MCA data can be either read from a file or from standard input. In the
latter case the program expects two column data where the first column contians
the bin index (starting from 0) or the bin center values and the second column
is the MCA data is. When data is read from a FIO file (currently the only
supported format) a single column with the MCA data is sufficient (the bin index
values are then generated automatically). 

All results are written to standard output. This allows several @command{mcaops}
commands to be chained using the pipe operator. 

The behavior of @command{mcaops} is controlled via the command string which is
passed as the first argument to the program.  Currently the following commands
are available:
@table @samp
@item max     
find the value and its position in the spectrum
@item sum
add all value in the spectrum
@item rebin   
rebin the spectrum to new bin sizes
@item scale
scale the bin centers of the spectrum
@item dump
dump channel and mca data unchanged to standard out
@end table
@noindent
These operations can roughly devided into two groups: accumulating and
non-accumulating operations. The former one reduces the entire MCA data to a
single number while the latter one preserves the spectrum character of the data
(though rebining maybe alters the number of bins). 


@menu 
* Program options:mcaops_options. command line options of @command{mcaops}
* Examples:mcaops_examples. usage examples for @command{mcaops}
* Details:mcaops_details. detailed explanation of the various commands
@end menu


@node mcaops_options
@subsection Program options

In general effect a particular option passed to @command{mcaops} has on the input data
depends on the operation that should be carried out. However, there are some
global options which always have the same effect on the behavior of the program
@table @samp
@item -h
@itemx --help
Print a usage message and exit.
@item -v
@itemx --verbose
Produce verbose output, printing information regarding the specified options and
objects.  All output is printed to standard error allowing you to redirect
payload data to an other program while still watching debugging output.
@item -q
@itemx --quiet
Suppress all unnecessary output (the counterpart of @option{-v})
@item --header
print a header before dumping the output to standard out
@item --xolumn=@var{COLNAME}
specify the name of the column to choose from the input to use as bin-center or
-index values. This option is only useful when used in connection with FIO
files.
@item --ycolumn=@var{COLNAME}
specify the name of the column to use for MCA data. This option is only useful
with a FIO file. 
@end table

@noindent
Options for the @command{rebin} operation
@table @samp
@item -b
@itemx --binsize=@var{NBINS}
defines the number of bins that should be collated during rebining. 
@item --noxrebin 
do not rebin the x-axis. Instead use indices for the output. 
@item --normalize 
normalize the rebinned data.
@end table

@noindent
Options for the  @command{scale} operation:
@table @samp
@item -c
@itemx --center=@var{CENTER}
defines the index of the center bin used for rescaling. 
@item -d
@itemx --delta=@var{DELTA}
defines the step width for the rebin operation
@item -x
@itemx --cvalue=@var{CENTERVALUE}
the value of the center bin.
@end table

@noindent
The @command{sum} and @command{max} command have no additional options.

@node mcaops_examples
@subsection Examples

For the examples two simple data files are generated which are located in the
example directory in the source distribution. The
first(@file{examples/mcaops/test.dat}), contains MCA data with
bin index information starting at 0 while the second one (
@file{examples/mcaops/test1.dat}) contains data with a bin index starting at 3.
We will use these files in the following examples along with the @command{cat}
to simulate input from standard input. The content of the two example files is
shown in the following figures
@iftex 
@example
$ GCMD="set xlabel \"channels\"; set xtics -2,1,12; plot '-' u 1:2 w boxes"
$ cat test.dat | gnuplot -p -e "$GCMD" 
$ cat test1.dat | gnuplot -p -e "$GCMD"
@end example
@end iftex
@ifinfo
@example
$ GCMD="set xlabel \"channels\"; set terminal dumb; set xtics -2,1,12; plot '-' u 1:2 w boxes"
$ cat test.dat | gnuplot -p -e "$GCMD" 
$ cat test1.dat | gnuplot -p -e "$GCMD"
@end example
@end ifinfo
@noindent 
gives
@float Figure,fig:mcaops_test
@center @image{pics/mcaops_test_dat,,3in,,.pdf}
@caption{The content of @file{examples/mcaops/test.dat} as shown by Gnuplot.} 
@end float
@float Figure,fig:mcaops_test1
@center @image{pics/mcaops_test1_dat,,3in,,.pdf}
@caption{The content of @file{examples/mcaops/test1.dat} as shown by Gnuplot.}
@end float

The first examples deal with the two accumulating operations @command{sum} and
@command{max}.  Lets start with the accumulative commands.  To compute the sum
of the data stored use
@example 
$ cat test.dat | mcaops sum 
602
@end example 
@noindent
where the output, 602, is the sum of all data values stored in the MCA. The sum
operation does not depend on the channel index and this is independent of it.
For a better understanding of how channel data is used by the program have a
look at the output of @command{max}. 
For @file{test.dat} we get the following result
@example 
$> cat test.dat | mcaops max
5   200
@end example 
@noindent
where the first number denots the channel index of the maximum bin and the
second the maximum value  of the MCA data. As we start indexing of bins at 0 we
get here the correct answer 5. 
Now lets have a look on the second file @file{test1.dat}
@example
$> cat test1.dat | mcaops max
8   200
@end example
@noindent 
If we would count the entries in the file we would see that the maximum position
is still 5 (when using 0 based counting). However, as the file provides channel
information we get the correct channel index from the program. 

In the next example lets have a look on the @command{scale} command. 
This command asigns new values to the bin center values with respect to a
particular reference bin. The reference bin can be either determined by the
program (it uses the channel number of the maximum data value) or can be passed
by the user. 
In the next example the program should automatically find the reference bin 
@example
$ cat test.dat | mcaops scale -d0.5 -x0.0
-2.5    1
-2      0
-1.5    10
-1      50
-0.5    100
0       200
0.5     70
1       150
1.5     20
2       1
2.5     0
@end example
@noindent 
Using @file{test1.dat} (the on where the bin index  starts with 3) we obtain the
same result
@example
$ cat test1.dat | mcaops scale -d0.5 -x0.0
-2.5    1
-2      0
-1.5    10
-1      50
-0.5    100
0       200
0.5     70
1       150
1.5     20
2       1
2.5     0
@end example
@noindent
In the case where we pass the reference bin manually the situation is quite
different. Lets repeat the two example but now pass the reference bin
explicitely. 
@example
$ cat test.dat | mcaops scale -d0.5 -x0.0 -c5
-2.5    1
-2      0
-1.5    10
-1      50
-0.5    100
0       200
0.5     70
1       150
1.5     20
2       1
2.5     0
@end example
@noindent 
For @file{test.dat} we obtain exactly the same result as before since the
maximum value has the bin index 5. Now lets see what happens to the data in file
@file{test1.dat}
@example
$> cat test1.dat | mcaops scale -d0.5 -x0.0 -c5
-1.000000000000000e+00	1.000000000000000e+00
-5.000000000000000e-01	0.000000000000000e+00
0.000000000000000e+00	1.000000000000000e+01
5.000000000000000e-01	5.000000000000000e+01
1.000000000000000e+00	1.000000000000000e+02
1.500000000000000e+00	2.000000000000000e+02
2.000000000000000e+00	7.000000000000000e+01
2.500000000000000e+00	1.500000000000000e+02
3.000000000000000e+00	2.000000000000000e+01
3.500000000000000e+00	1.000000000000000e+00
4.000000000000000e+00	0.000000000000000e+00
@end example
The scale is now shifted as the bin index in @file{test1.dat} starts with 3.

@example
$ cat test.dat | mcaops rebin --noxrebin -b3
0       11
1       350
2       240
3       1
$ cat test.dat | mcaops rebin --noxrebin -b3 | gnuplot -p -e "$GCMD"
@end example
@float
@center @image{pics/mcaops_rebin3,,3in,,.pdf}
@end float
@noindent
@command{mcaops} does not normalize the re-binned data by default. To normalize
the data use the @option{--normalize}. 

@example
$ cat test.dat | mcaops rebin --noxrebin --normalize -b3 
0       3.66667
1       116.667
2       80
3       0.5
@end example

@noindent
The @option{--noxrebin} option tells the program to not rebin the x-axis.
Typically one would not use this option if the x-axis has some physical meaning
(instead of just bin numbers as in this example). 


Though @command{mcaops} currently not supports Nexus files, one can use it in
connection with @command{ncat} by piping the output of @command{nxcat} as new
input to @command{mcaops}. See @ref{nxcat} for more information.

@node mcaops_details
@subsection What the commands are really doing

This section gives detailed information about the functionality of the different
@command{mcaops} commands in particular about the @command{scale} and the
@command{rebin} command. Before we can do this a bit of terminology is required. 
MCAs usually produce histogram data as shown in this image
@float
@center @image{pics/mca_basics_1,,3in,,.pdf}
@end float
@noindent 
Here, the MCA is counting events in different energy windows of equal size
@math{\Delta E}. Every bin @math{b_i} has a center energy @math{c_i} given by 
@math{c_i = E_i+{{\Delta E} \over {2}}}. To keep the documentation consistent
some terms will be defined 
@itemize @bullet
@item
@math{b_i} will denote the @math{i}-th bin of the histogram
@item
@math{\Delta b} denotes the width of the bins (it is assumed that all bins have
the same size)
@item
@math{c_i} denotes the center value of the @math{i}-th bin
@item
@math{i} just denotes the index of the bins starting from @math{0}.
@end itemize
When a histogram is plotted the abscissa is typically showing the @math{c_i}
while the ordinate shows the number of counts for each bin. If no bin center
values are available typically the index of the bins is shown along the
abscissa. 

@subsubsection The @command{scale} command

The @command{scale} command of @command{mcaops} assigns new values to the center
values of the histogram bins with respect to a reference bin. 
To compute the new center values from incoming
data several parameters are required which must be either provided by the user
or in some cases can be inferred automatically from the data.
Those parameters are 
@itemize @bullet 
@item
the index of the reference bin @math{i_{ref}} 
@item 
a center value for the reference bin  @math{c_{ref}}
@item 
and the new width of the binds @math{\Delta b}
@end itemize
@noindent
The index of the reference bin can either be computed from the maximum position
of the histogram or can be passed as a command line option by the user. With
these parameters the new center values for the binds can be computed using the
following linear function
@tex
$$
c_i = c_{ref} + \Delta b (i-i_{ref})
$$
@end tex


@math{\sin(x)dx_2}

@subsubsection The @command{rebin} command
