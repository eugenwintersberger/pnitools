@command{mcaops} applies certain mathematical operations onto
MCA data. These operations include summation, finding minimum and maximum in the
data, channel-rebinning, and the like.  The overall structure of a typical
@command{mcaops} command line looks like this 

@example
mcaops [GENERAL OPTIONS] [OPS] [OPS OPTIONS] [INPUT FILE,...]
@end example

@noindent
where
@table @samp
@item GENERAL OPTIONS
are options valid for all commands available for @command{mcaops}
@item OPS
determines the operation which to apply to the input data
@item OPS OPTIONS
are options which are specific for the operation selected 
@item INPUT FILE
determines the source from which to obtain the data to process.
@end table

@c ===========================================================================
@subsection Obtaining input

Every command expects as its input arguemnts two arrays whose size is equal to
the MCAs number of channels. The first array provides the channel indexes while
the second one the actual MCA data. If the channel indexes or or bin center
values are not provided, @command{mcaops} generates a set of channel indexes by
itself starting from with an index value provided by the 
@option{--auto-index-offset}. The default value of this option is @math{0}.

@command{mcaops} can read MCA data from three sources
@itemize @bullet
@item standard input
@item a single or multiple ASCII files 
@item a single or multiple NeXuS files
@end itemize
The way how @command{mcaops} treats the data depends on the particular data
source used to obtain the MCA data.

@c ---------------------------------------------------------------------------
@subsubsection Reading data from standard input

By default, when reading data from standard input, @command{mcaops} assumes that
the entire data it collects until the end of the stream belongs to a single MCA
spectrum. 

@example 
$> cat mca.dat | mcaops sum 
10234452.0
@end example

@noindent
If the number of channels @math{n} is provided by the
@option{--mca-size}/@option{-s} option in the general options section, every block of
@math{n} input values from the stream is treated as an individual MCA spectrum. 

@example
$> cat mca.dat | mcaops -s128 sum
1234.0
8445.0
2391.0
@end example

@c ---------------------------------------------------------------------------
@subsubsection Reading data from ASCII files

Currently the only ASCII format supported are @file{.fio} files as produced by
the @command{online} data acquisition system used at some beamlines at DESY.
In general @command{mcaops} assumes that every ASCII file contains a single
spectrum. @command{mcaops} assumes that ASCII files can contain several, named
columns of data. It is thus necessary to tell the program from which column to
read the channel/bin center and the MCA data. The general option @option{-m}
determines the name of the column storing the MCA data.

@example
$> mcaops -mmca_data sum testdata.fio
@end example 

@noindent
The @option{-m} is thus mandatory. If the file also contains columns with the
channel index or bin center data one can use the @option{-c} or @option{-b}
respectively to inform @command{mcaops} where to find this information

@example
$> mcaops -benergy -mmca_data sum testdata.fio
@end example

@noindent
Unlike the @option{-m}, @option{-b} and @option{-c} are optional as an channel
index array will be generated automatically if not provided by the user.

@c ----------------------------------------------------------------------------
@subsubsection Reading data from NeXuS files

Besides ASCII files, @command{mcaops} can also read data from one or several
NeXuS files. As for ASCII files the @option{-m} must be used to determine the
location of the MCA data. However, unlike for ASCII files, the @option{-m} does
not provide a column name but the path to a particular NeXuS object that stores
the MCA data. 

@example 
$> mcaops -m/:NXentry/:NXinstrument/:NXdetector/data sum mca_data.nxs
@end example

@noindent
The data field can be either a one or a two dimensional field. In the former
case the field is considered to store a single spectrum while in the latter one
the field is assumed to store several spectra where the first dimension runs
over the number of spectra and the second dimension represents the MCA channels. 

To reduce the writting effort one can use the general option @option{--base} 
to set a base path. The previous example would then look like this 

@example 
$> BASE=/:NXentry/:NXinstrument/:NXdetector
$> mcaops --base=$BASE -mdata sum mca_data.nxs
@end example

@noindent
Like for ASCII files we can also use the @option{-c} and @option{-b} to tell
@command{mcaops} where to find channel index or bin center information
respectively. With these two options the benefits of @option{--base} become even
more obvious 

@example 
$> BASE=/:NXentry/:NXinstrument/:NXdetector
$> mcaops --base=$BASE -mdata -benergy sum mca_data.nxs
@end example 

@noindent
Multiple NeXuS files can be processed provided that the MCA data and possible
channel index or bin center data can be reference by the same path

@example 
$> BASE=/:NXentry/:NXinstrument/:NXdetector
$> mcaops --base=$BASE -mdata -benergy sum mca_1.nxs mca_2.nxs
@end example

@noindent
If the MCA files store several MCA spectra (data is a 2D field) first all the
spectra of the first file are processed, followed by the spectra of the second
file, and so on.

@c ===========================================================================
@subsection Writing output
Currently, @command{mcaops} supports output only to standard output. In the
future more options to write the results may become available. 

@c ---------------------------------------------------------------------------
@subsection Available operations
The behavior of @command{mcaops} is controlled via the command string which is
passed to the program after the general options. The operations currently
@table @samp
@item max     
find the maximum value in the MCA data
@item maxpos 
find the position of the maximum value
@item min
find the mininum value in the MCA data
@item minpos
find the minimum location in the MCA data
@item sum
add all value in the spectrum
@item average
compute the average from the entire MCA data
@item rebin   
rebin the spectrum to new bin sizes
@item scale
scale the bin centers of the spectrum
@item dump
dump channel and mca data unchanged to standard out
@end table
@noindent
One can roughly distinguish two kinds of operations: accumulating and
non-accumulating operations. The former ones reduce the input data typically to
one number while the latter ones do not.  Most of the available operations can
be easily classified into one of the two kinds. The only exception is the 
@command{rebin} operation though it reduces the number of bins in most cases it
does not go that far to virtually sum all data into a single bin.

@c ---------------------------------------------------------------------------
@subsubsection MCA terminology 

An MCA basically collects a histogram of events.
Before discussing the individual operations in more detail some terms have 
to be defined. 

@center @image{pics/mca_basics_1,,3in,,}

@multitable @columnfractions 0.05 0.95
@item @math{i} 
@tab denotes the channel index

@item @math{b_{i}} 
@tab the MCA value at channel @math{i}

@item @math{\Delta}
@tab the width of the MCA channels. It is assumed that all channels have the same
width. 

@item @math{c_{i}}
@tab the bin center value of channel @math{i}

@item @math{N}
@tab the total number of channels in the MCA
@end multitable
@noindent 
Furthermore there are some definitions for a region of interest (ROI)
@multitable @columnfractions 0.1 0.9
@item @math{r_{\rm start}}
@tab start index of the ROI

@item @math{r_{\rm stop}}
@tab stop index of the ROI. The stop index resembles Python slices so it does not
point to the index of the last channel but to the index of the channel right after
the last.
@end multitable

@c ---------------------------------------------------------------------------
@subsubsection The @command{min}, @command{max}, @command{minpos}, @command{maxpos} operation

None of these operations require an additional argument and do what their names
imply. 

@c ---------------------------------------------------------------------------
@subsubsection The @command{sum} operation

In the simplest case this operation simply sums up all the bin values of the MCA
spectrum
@tex
$$
 s = \sum_{i=0}^{N-1} b_{i}
$$
@end tex
@noindent
where @math{i} is the channel index, @math{N} the number of channels, and
@math{b_{i}} the data value at the @math{i}-th channel. @math{s} is the result
written to standard output.  If a ROI is set the sum runs from 
@tex
$$
s = \sum_{i=r_{start}}^{r_{stop}-1} b_{i}
$$
@end tex

@subsubsection The @command{average} operation

Computes the average over all bins in the MCAs histogram
@tex
$$
 a = {{1}\over{N}}\sum_{i=0}^{N-1}b_{i}
$$
@end tex
@noindent
and in the presence of a ROI
@tex
$$
 a = {{1}\over{r_{\rm stop}-r_{\rm start}}}
     \sum_{i=r_{\rm start}}^{r_{\rm stop}-1}b_{i}
$$
@end tex
@noindent
where in both expressions @math{a} denotes the average.

@subsubsection The @command{rebin} operation

The @command{rebin} command collates several bins into one. The critical
parameters here is called @math{b} which is the number of bins that should be
collated. @math{n} denots the number of bins of the original histogram. 
The new number of bins can be computed with
@tex
$$
\bar n = \biggm\lfloor {{n}\over{b}} \biggm\rfloor + (1)
$$
@end tex
If @math{N} is not an integer multiple of @math{b} we have to add an extra bin
which comes from the last term in the previous expression.
Technically rebining is done by averaging the values stored in the original
@math{b} bins and store the result in a single bin
@tex
$$
\bar d_j = {{1}\over{\bar n}}
           \sum_{i=r_{\rm start}}^{r_{\rm stop}}d_{jb+i}
$$
@end tex
where @math{j=1,\ldots, n_r} and @math{r_j} denots the value of the @math{j}th
bin in the rebinned histogram. Again we have to take care for the situation
where the @math{n} is not a multiple interger of @math{b}. In this case the last
bin value for the new histogram is computed with
@tex
$$
\bar d_{\bar n} = {{1}\over{n \bmod b}}
                  \sum_{i=n- n\bmod b}^n d_i.
$$
@end tex
In some cases not only the data should be recomputed but also the center values
of the bins. The procedure is actually the same as for the bin data shown above.
However, instead of the @math{d_j} averaging is done over the @math{c_j}.


@subsubsection The @command{scale} operation

The @command{scale} command of @command{mcaops} assigns new values to the center
values of the histogram bins with respect to a reference bin. 
To compute the new center values from incoming
data several parameters are required which must be either provided by the user
or in some cases can be inferred automatically from the data.
Those parameters are 
@itemize @bullet 
@item
the index of the reference bin @math{i_{ref}} 
@item 
a center value for the reference bin  @math{c_{ref}}
@item 
and the new width of the binds @math{\Delta b}
@end itemize
@noindent
The index of the reference bin can either be computed from the maximum position
of the histogram or can be passed as a command line option by the user. With
these parameters the new center values for the binds can be computed using the
following linear function
@tex
$$
c_i = c_{ref} + \Delta b (i-i_{ref})
$$
@end tex

@subsubsection The @command{dump} operation

This operation does virtually nothing. It only adds the channel index data and
writes it along with the MCA data to standard out. 

@example 
$ cat mca.dat | mcaops dump 
0 120.
1 3434.
2 948.
4 9991023.
....
...
..
@end example 



@c ---------------------------------------------------------------------------
@menu 
* Program options:mcaops_options. command line options of @command{mcaops}
* Examples:mcaops_examples. usage examples for @command{mcaops}
@end menu


@c ---------------------------------------------------------------------------
@node mcaops_options
@subsection Program options

In general effect a particular option passed to @command{mcaops} has on the
input data depends on the operation that should be carried out. H

@subsubsection General program options
These options apply to all operations
@table @samp
@item -h
@itemx --help
Print a usage message and exit.
@item -v
@itemx --verbose
Produce verbose output, printing information regarding the specified options and
objects.  All output is printed to standard error allowing you to redirect
payload data to an other program while still watching debugging output.
@item -q
@itemx --quiet
Suppress all unnecessary output (the counterpart of @option{-v})
@item --header
print a header before dumping the output to standard out
@item -c
@itemx --channels=@var{COLNAME}
specifies the name of the data object storing the channel index or bin center
data. For @file{FIO} files this is the name of a column within the file and
for @file{NeXuS} files this is the path to a one dimensional field.
@item -b
@itemx --bins
the same as channels
@item -m
@itemx --mca=@var{COLNAME}
specifies the name of the data objects storing the @file{MCA} data which
should be processed. For @file{FIO} files this is the name of a column in
the file and for @file{NeXuS} files it is the path to a one or two
dimensional field.
@item --auto-index-offset=@var{INDEX-OFFSET}
if no bin center or channel index array is provided by the user,
@command{mcaops} is generating channel index data automatically starting from an
index value determined by this option. The default value is @math{0}.
@item -r 
@item --roi 
a region of interest (ROI) to which the operation can be restricted. The value
of this option is a numeric range (@pxref{Numeric ranges}).
@item -s
@itemx --mca-size
this option provides the total number of channels of the input data. It only
takes effect when data is read from standard input.
@item --base
base path for NeXus files. The value of this option is used as a prefix to
every NeXus object used with @option{-b} and @option{-m}.
@end table

@subsubsection Options for the @command{rebin} operation
@table @samp
@item -b
@itemx --binsize=@var{NBINS}
defines the number of bins that should be collated during rebining. 
@item --noxrebin 
do not rebin the x-axis. Instead use indices for the output. 
@item --normalize 
normalize the rebinned data.
@end table

@subsubsection Options for the  @command{scale} operation:
@table @samp
@item -c
@itemx --center=@var{CENTER}
defines the index of the center bin used for rescaling. 
@item -d
@itemx --delta=@var{DELTA}
defines the step width for the rebin operation
@item -x
@itemx --cvalue=@var{CENTERVALUE}
the value of the center bin.
@end table

@noindent
The @command{sum} and @command{max} command have no additional options.

@node mcaops_examples
@subsection Examples

For the examples two simple data files are generated which are located in the
example directory in the source distribution. The
first(@file{examples/mcaops/test.dat}), contains MCA data with
bin index information starting at 0 while the second one (
@file{examples/mcaops/test1.dat}) contains data with a bin index starting at 3.
We will use these files in the following examples along with the @command{cat}
to simulate input from standard input. The content of the two example files is
shown in the following figures
@iftex 
@example
$ GCMD="set xlabel \"channels\"; set xtics -2,1,12; plot '-' u 1:2 w boxes"
$ cat test.dat | gnuplot -p -e "$GCMD" 
$ cat test1.dat | gnuplot -p -e "$GCMD"
@end example
@end iftex
@ifinfo
@example
$ GCMD="set xlabel \"channels\"; set terminal dumb; set xtics -2,1,12; plot '-' u 1:2 w boxes"
$ cat test.dat | gnuplot -p -e "$GCMD" 
$ cat test1.dat | gnuplot -p -e "$GCMD"
@end example
@end ifinfo
@noindent 
gives
@float Figure,fig:mcaops_test
@ifhtml
@center @image{pics/mcaops_test_dat,,3in,,}
@end ifhtml
@iftex
@center @image{pics/mcaops_test_dat,,3in,,}
@end iftex
@caption{The content of @file{examples/mcaops/test.dat} as shown by Gnuplot.} 
@end float
@float Figure,fig:mcaops_test1
@center @image{pics/mcaops_test1_dat,,3in,,}
@caption{The content of @file{examples/mcaops/test1.dat} as shown by Gnuplot.}
@end float

The first examples deal with the two accumulating operations @command{sum} and
@command{max}.  Lets start with the accumulative commands.  To compute the sum
of the data stored use
@example 
$ cat test.dat | mcaops sum 
602
@end example 
@noindent
where the output, 602, is the sum of all data values stored in the MCA. The sum
operation does not depend on the channel index and this is independent of it.
For a better understanding of how channel data is used by the program have a
look at the output of @command{max}. 
For @file{test.dat} we get the following result
@example 
$> cat test.dat | mcaops max
5   200
@end example 
@noindent
where the first number denots the channel index of the maximum bin and the
second the maximum value  of the MCA data. As we start indexing of bins at 0 we
get here the correct answer 5. 
Now lets have a look on the second file @file{test1.dat}
@example
$> cat test1.dat | mcaops max
8   200
@end example
@noindent 
If we would count the entries in the file we would see that the maximum position
is still 5 (when using 0 based counting). However, as the file provides channel
information we get the correct channel index from the program. 

In the next example lets have a look on the @command{scale} command. 
This command asigns new values to the bin center values with respect to a
particular reference bin. The reference bin can be either determined by the
program (it uses the channel number of the maximum data value) or can be passed
by the user. 
In the next example the program should automatically find the reference bin 
@example
$ cat test.dat | mcaops scale -d0.5 -x0.0
-2.5    1
-2      0
-1.5    10
-1      50
-0.5    100
0       200
0.5     70
1       150
1.5     20
2       1
2.5     0
@end example
@noindent 
Using @file{test1.dat} (the on where the bin index  starts with 3) we obtain the
same result
@example
$ cat test1.dat | mcaops scale -d0.5 -x0.0
-2.5    1
-2      0
-1.5    10
-1      50
-0.5    100
0       200
0.5     70
1       150
1.5     20
2       1
2.5     0
@end example
@noindent
In the case where we pass the reference bin manually the situation is quite
different. Lets repeat the two example but now pass the reference bin
explicitely. 
@example
$ cat test.dat | mcaops scale -d0.5 -x0.0 -c5
-2.5    1
-2      0
-1.5    10
-1      50
-0.5    100
0       200
0.5     70
1       150
1.5     20
2       1
2.5     0
@end example
@noindent 
For @file{test.dat} we obtain exactly the same result as before since the
maximum value has the bin index 5. Now lets see what happens to the data in file
@file{test1.dat}
@example
$> cat test1.dat | mcaops scale -d0.5 -x0.0 -c5
-1.000000000000000e+00	1.000000000000000e+00
-5.000000000000000e-01	0.000000000000000e+00
0.000000000000000e+00	1.000000000000000e+01
5.000000000000000e-01	5.000000000000000e+01
1.000000000000000e+00	1.000000000000000e+02
1.500000000000000e+00	2.000000000000000e+02
2.000000000000000e+00	7.000000000000000e+01
2.500000000000000e+00	1.500000000000000e+02
3.000000000000000e+00	2.000000000000000e+01
3.500000000000000e+00	1.000000000000000e+00
4.000000000000000e+00	0.000000000000000e+00
@end example
The scale is now shifted as the bin index in @file{test1.dat} starts with 3.

@example
$ cat test.dat | mcaops rebin --noxrebin -b3
0       11
1       350
2       240
3       1
$ cat test.dat | mcaops rebin --noxrebin -b3 | gnuplot -p -e "$GCMD"
@end example
@float
@center @image{pics/mcaops_rebin3,,3in,,}
@end float
@noindent
@command{mcaops} does not normalize the re-binned data by default. To normalize
the data use the @option{--normalize}. 

@example
$ cat test.dat | mcaops rebin --noxrebin --normalize -b3 
0       3.66667
1       116.667
2       80
3       0.5
@end example

@noindent
The @option{--noxrebin} option tells the program to not rebin the x-axis.
Typically one would not use this option if the x-axis has some physical meaning
(instead of just bin numbers as in this example). 


Though @command{mcaops} currently not supports Nexus files, one can use it in
connection with @command{ncat} by piping the output of @command{nxcat} as new
input to @command{mcaops}. See @ref{nxcat} for more information.

@subsection What the commands are really doing

This section gives detailed information about the functionality of the different
@command{mcaops} commands in particular about the @command{scale} and the
@command{rebin} command. Before we can do this a bit of terminology is required. 
MCAs usually produce histogram data as shown in this image
@float
@center @image{pics/mca_basics_1,,3in,,}
@end float
@noindent 
Here, the MCA is counting events in different energy windows of equal size
@math{\Delta E}. Every bin @math{b_i} has a center energy @math{c_i} given by 
@math{c_i = E_i+{{\Delta E} \over {2}}}. To keep the documentation consistent
some terms will be defined 
@itemize @bullet
@item
@math{b_i} will denote the @math{i}-th bin of the histogram
@item
@math{\Delta b} denotes the width of the bins (it is assumed that all bins have
the same size)
@item
@math{c_i} denotes the center value of the @math{i}-th bin
@item
@math{i} just denotes the index of the bins starting from @math{0}.
@end itemize
When a histogram is plotted the abscissa is typically showing the @math{c_i}
while the ordinate shows the number of counts for each bin. If no bin center
values are available typically the index of the bins is shown along the
abscissa. 

