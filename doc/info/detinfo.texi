@command{detinfo} reveals basic information about the data stored in a detector
file. A typical application of @command{detinfo} would be to determine the
detector parameters for a bunch of individual files before merging them into a
single NeXus file.
The parameters retrieved by @command{detinfo} are
@itemize @bullet
@item 
the data source. For CBF or TIF files this is the filename, for Nexus files it
is the path to the data field in the detectors NXdetector instance. 

@item
the number of pixels along each of the detectors dimensions

@item 
the pixel data type 

@item
the total number of frames stores in the file

@item
the detectors type, which is currently either:  @emph{point}, 
@emph{linear}, or @emph{area}
@end itemize
@noindent
The detector types @emph{point}, @emph{linear}, and @emph{area} denote 
a @math{0}-, @math{1}-, and @math{2}-dimensional detector respectively. 
@command{detinfo} currently supports the following detector file formats
@itemize @bullet
@item 
CBF - the CIF binary format written by DECTRIS detectors

@item 
TIFF - the tagged image file format

@item 
NeXus - with HDF5 as physical file format

@end itemize
@noindent
In the case of CBF or TIF files the program assumes that each files belongs to a
single detector. As a Nexus file can store several detectors in a single file 
the information is shown for every instance of NXdetector in the file.

Invocing @command{detinfo} is rather straight forward
@example
detinfo [OPTIONS] FILESPEC
@end example

@noindent
@var{FILESPEC} describes the list of files that should be read by
@command{detinfo}. For more information about how to specify input files see
@ref{Input file selection}.
@command{detinfo} returns 0 in case of success and 1 otherwise. 
By default the program writes its output in a tabular from to standard output. 
Different output formats like @emph{XML} or @emph{CSV} can be 
chosen by using the @option{-f} option (see below).

@c ===========================================================================
@c describe command line options here
@c ===========================================================================
@subsection Program options

@command{detinfo}s behavior can be controlled with the following command 
line options

@table @samp
@item -h
@itemx --help
show a brief help text 

@item -f
@itemx --format
this option determines the format in which the output is presented. For this
version of @command{detinfo} this option can take the values: simple (which is
the default), keyvalue, csv, or xml
@end table

@c ===========================================================================
@c show examples of how detinfo works
@c ===========================================================================
@subsection Examples

Consider a directory with TIF files, calling @command{detinfo} with no options
would yield a similar result like this
@smallexample
$ detinfo detector_%03i.tif:9:16
detector_009.tif  type = area  pixel type = UINT32  frames = 1 frame shape = (2300,2300)
detector_010.tif  type = area  pixel type = UINT32  frames = 1 frame shape = (2300,2300)
detector_011.tif  type = area  pixel type = UINT32  frames = 1 frame shape = (2300,2300)
detector_012.tif  type = area  pixel type = UINT32  frames = 1 frame shape = (2300,2300)
detector_013.tif  type = area  pixel type = UINT32  frames = 1 frame shape = (2300,2300)
detector_014.tif  type = area  pixel type = UINT32  frames = 1 frame shape = (2300,2300)
detector_015.tif  type = area  pixel type = UINT32  frames = 1 frame shape = (2300,2300)
@end smallexample
@noindent
Output as a @emph{CSV} table could be achieved with
@smallexample
$ detinfo -fcsv detector_%03i.tif:9:16
source ; type ; pixel type ; number of frames ; frame shape
detector_009.tif ; area ; UINT32 ; 1 ; (2300,2300)
detector_010.tif ; area ; UINT32 ; 1 ; (2300,2300)
detector_011.tif ; area ; UINT32 ; 1 ; (2300,2300)
detector_012.tif ; area ; UINT32 ; 1 ; (2300,2300)
detector_013.tif ; area ; UINT32 ; 1 ; (2300,2300)
detector_014.tif ; area ; UINT32 ; 1 ; (2300,2300)
detector_015.tif ; area ; UINT32 ; 1 ; (2300,2300)
@end smallexample
@noindent
The @emph{CSV} output could be used for automatic processing of the output. 
Note that the first row of output contains the column names 
@command{detinfo} associates weach entry with.

A Nexus file can store the data of several detectors and the full path to the
data field of every detector is used as the source 
@smallexample
$ detinfo  tstfile_00012.h5
tstfile_00012.h5://entry:NXentry/instrument:NXinstrument/channel_1:NXdetector/data\
type = point  pixel type = UINT64  frames = 2001 
tstfile_00012.h5://entry:NXentry/instrument:NXinstrument/channel_10:NXdetector/data\
type = point  pixel type = UINT64  frames = 2001 
tstfile_00012.h5://entry:NXentry/instrument:NXinstrument/channel_2:NXdetector/data\
type = point  pixel type = UINT64  frames = 2001 
tstfile_00012.h5://entry:NXentry/instrument:NXinstrument/channel_3:NXdetector/data\
type = point  pixel type = UINT64  frames = 2001 
tstfile_00012.h5://entry:NXentry/instrument:NXinstrument/channel_4:NXdetector/data\
type = point  pixel type = UINT64  frames = 2001 
tstfile_00012.h5://entry:NXentry/instrument:NXinstrument/channel_5:NXdetector/data\
type = point  pixel type = UINT64  frames = 2001 
tstfile_00012.h5://entry:NXentry/instrument:NXinstrument/channel_6:NXdetector/data\
type = point  pixel type = UINT64  frames = 2001 
tstfile_00012.h5://entry:NXentry/instrument:NXinstrument/channel_7:NXdetector/data\
type = point  pixel type = UINT64  frames = 2001 
tstfile_00012.h5://entry:NXentry/instrument:NXinstrument/channel_8:NXdetector/data\
type = point  pixel type = UINT64  frames = 2001 
tstfile_00012.h5://entry:NXentry/instrument:NXinstrument/channel_9:NXdetector/data\
type = point  pixel type = UINT64  frames = 2001
@end smallexample
@noindent
Not that in the case of a point detector no frame shape is shown.

